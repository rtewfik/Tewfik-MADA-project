---
title: "Statistical Analysis"
author: "Ranni Tewfik"
date: "03/15/2024"
output: html_document
---

  
# Statistical Analysis


This statistical analysis script loads the processed data and performs statistical analyses.


# Load and Check Processed Data


First, let's load and summarize the processed data for statistical analyses.


```{r}
# Load required packages
library(here)
library(dplyr)
library(skimr)
library(survival)
library(survminer)
library(ggplot2)
library(tidyverse)
library(gtsummary)
library(car)
library(broom)
library(rsample)
library(caret)
library(tidymodels)
library(glmnet)
library(MASS)
library(discrim)
library(flextable)

# Load processed data
seer <- readRDS(here("data/processed-data/processeddata.rds"))

# Attach processed data
attach(seer)

# Summary of processed data
glimpse(seer)
summary(seer)
head(seer)
```


The processed dataset has 776,196 observations and 7 variables: "ethnicity", "agegroup", "stage", "education", "family_history", "death", and "survival_time".


# Backward Elimination


Now let's use the backward elimination technique to help decide the best Cox proportional hazards model for survival analysis.


```{r}
# Fit the full Cox proportional hazards model
seer$death <- as.numeric(seer$death)
full_model <- coxph(Surv(survival_time, death) ~ ., data = seer, method = "breslow")

# Perform backward elimination to choose the best variables
final_model <- stats::step(full_model, direction = "backward")
summary(final_model)
```


Based on the results of the backward elimination process using the AIC criterion, "ethnicity", "agegroup", and "stage" will be the variables in the full Cox proportional hazards model. The existing literature supports the inclusion of these confounding variables in an etiologic/causal model.


# Proportional Hazards Assessment


Then let's conduct a proportional hazards assessment to evaluate whether the proportional hazards assumption holds for a Cox proportional hazards regression model.


```{r}
# Create a log-log survival curve for "ethnicity"
plot(survfit(Surv(survival_time, death) ~ ethnicity), fun = "cloglog")

# Save the log-log survival curve for "ethnicity"
png(here("results/figures/loglogcurve_ethnicity.png"))
plot(survfit(Surv(survival_time, death) ~ ethnicity), fun = "cloglog")
dev.off()

# Create a log-log survival curve for "agegroup"
plot(survfit(Surv(survival_time, death) ~ agegroup), fun = "cloglog")

# Save the log-log survival curve for "agegroup"
png(here("results/figures/loglogcurve_age.png"))
plot(survfit(Surv(survival_time, death) ~ agegroup), fun = "cloglog")
dev.off()

# Create a log-log survival curve for "stage"
plot(survfit(Surv(survival_time, death) ~ stage), fun = "cloglog")

# Save the log-log survival curve for "stage"
png(here("results/figures/loglogcurve_stage.png"))
plot(survfit(Surv(survival_time, death) ~ stage), fun = "cloglog")
dev.off()
```


The log-log survival curves to test the proportional hazards assumption for the Cox proportional hazards model can be found in the "figures" folder.


The proportional hazards assumption holds, indicating that a Cox proportional hazards model is appropriate for this analysis.


# Unadjusted Analyses


Next let's conduct unadjusted analyses of the Cox proportional hazards model using only ethnicity, age group, or cancer stage is the predictor.


```{r}
# Fit the Cox proportional hazards model using "ethnicity" as the predictor
seer$death <- as.numeric(seer$death)
simple_model_ethnicity <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(ethnicity), ref = "White"), data = seer, method = "breslow")
summary(simple_model_ethnicity)

# Compute and print the C-index
predicted <- predict(simple_model_ethnicity, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = seer)
print(c_index[[1]])

# Place the results from the model fitting into a data frame with the tidy function
simple_model_ethnicity_table <- tidy(simple_model_ethnicity)

# Look at the table with the results from the model fitting
print(simple_model_ethnicity_table)

# Save the table with the results from the model fitting 
saveRDS(simple_model_ethnicity_table, file = here("results/tables/simple_model_ethnicity_table.rds"))

# Place the exponentiated coefficients (hazard ratios) and confidence intervals from the model fitting into a data frame 
coxsummary <- summary(simple_model_ethnicity)
hr <- coxsummary$conf.int

simple_model_ethnicity_table_hr <- data.frame(
  "Characteristic" = c("Asian", "Black", "Hispanic", "Other"),
  "Hazard ratio" = hr[, 1],
  "95% CI (lower)" = hr[, 3],
  "95% CI (upper)" = hr[, 4]
  )

# Format numerical values to two decimal places
numeric_cols <- sapply(simple_model_ethnicity_table_hr, is.numeric)

simple_model_ethnicity_table_hr[, numeric_cols] <- round(simple_model_ethnicity_table_hr[, numeric_cols], digits = 2)

# Set flextable background to white
set_flextable_defaults(background.color = "white")

# Create a flextable object
simple_model_ethnicity_table_hr <- flextable(simple_model_ethnicity_table_hr)

# Set column headers
simple_model_ethnicity_table_hr <- set_header_labels(x = simple_model_ethnicity_table_hr, values = c("Characteristic", "Hazard Ratio", "Lower 95% CI", "Upper 95% CI"))

# Add a title
simple_model_ethnicity_table_hr <- set_caption(simple_model_ethnicity_table_hr, "Table 1. Unadjusted hazard ratios and 95% confidence intervals for the effect of ethnicity on time to all-cause mortality among males in the U.S. with prostate cancer (SEER database).")

# Autofit the table
simple_model_ethnicity_table_hr <- autofit(simple_model_ethnicity_table_hr)

# Look at the table with hazard ratios and confidence intervals
print(simple_model_ethnicity_table_hr)

# Save the table with hazard ratios and confidence intervals
save_as_image(simple_model_ethnicity_table_hr, here("results/tables/simple_model_ethnicity_table_hr.png"), expand = 10)
```


The results from the model fitting using only "ethnicity" as the predictor ("simple_model_ethnicity_table.rds" and "simple_model_ethnicity_table_hr.png") can be found in the "tables" folder.


```{r}
# Fit the Cox proportional hazards model using "agegroup" as the predictor
seer$death <- as.numeric(seer$death)
simple_model_agegroup <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(agegroup), ref = "0-49 years"), data = seer, method = "breslow")
summary(simple_model_agegroup)

# Compute and print the C-index
predicted <- predict(simple_model_agegroup, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = seer)
print(c_index[[1]])

# Place the results from the model fitting into a data frame with the tidy function
simple_model_agegroup_table <- tidy(simple_model_agegroup)

# Look at the table with the results from the model fitting
print(simple_model_agegroup_table)

# Save the table with the results from the model fitting 
saveRDS(simple_model_agegroup_table, file = here("results/tables/simple_model_agegroup_table.rds"))

# Place the exponentiated coefficients (hazard ratios) and confidence intervals from the model fitting into a data frame 
coxsummary <- summary(simple_model_agegroup)
hr <- coxsummary$conf.int

simple_model_agegroup_table_hr <- data.frame(
  "Characteristic" = c("50-59 years", "60-69 years", "70-79 years", "80+ years"),
  "Hazard ratio" = hr[, 1],
  "95% CI (lower)" = hr[, 3],
  "95% CI (upper)" = hr[, 4]
  )

# Format numerical values to two decimal places
numeric_cols <- sapply(simple_model_agegroup_table_hr, is.numeric)

simple_model_agegroup_table_hr[, numeric_cols] <- round(simple_model_agegroup_table_hr[, numeric_cols], digits = 2)

# Set flextable background to white
set_flextable_defaults(background.color = "white")

# Create a flextable object
simple_model_agegroup_table_hr <- flextable(simple_model_agegroup_table_hr)

# Set column headers
simple_model_agegroup_table_hr <- set_header_labels(x = simple_model_agegroup_table_hr, values = c("Characteristic", "Hazard Ratio", "Lower 95% CI", "Upper 95% CI"))

# Add a title
simple_model_agegroup_table_hr <- set_caption(simple_model_agegroup_table_hr, "Table 2. Unadjusted hazard ratios and 95% confidence intervals for the effect of age on time to all-cause mortality among males in the U.S. with prostate cancer (SEER database).")

# Autofit the table
simple_model_agegroup_table_hr <- autofit(simple_model_agegroup_table_hr)

# Look at the table with hazard ratios and confidence intervals
print(simple_model_agegroup_table_hr)

# Save the table with hazard ratios and confidence intervals
save_as_image(simple_model_agegroup_table_hr, here("results/tables/simple_model_agegroup_table_hr.png"), expand = 10)
```


The results from the model fitting using only "agegroup" as the predictor ("simple_model_agegroup_table.rds" and "simple_model_agegroup_table_hr.png") can be found in the "tables" folder.


```{r}
# Fit the Cox proportional hazards model using "stage" as the predictor
seer$death <- as.numeric(seer$death)
simple_model_stage <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(stage), ref = "Localized"), data = seer, method = "breslow")
summary(simple_model_stage)

# Compute and print the C-index
predicted <- predict(simple_model_stage, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = seer)
print(c_index[[1]])

# Place the results from the model fitting into a data frame with the tidy function
simple_model_stage_table <- tidy(simple_model_stage)

# Look at the table with the results from the model fitting
print(simple_model_stage_table)

# Save the table with the results from the model fitting 
saveRDS(simple_model_stage_table, file = here("results/tables/simple_model_stage_table.rds"))

# Place the exponentiated coefficients (hazard ratios) and confidence intervals from the model fitting into a data frame 
coxsummary <- summary(simple_model_stage)
hr <- coxsummary$conf.int

simple_model_stage_table_hr <- data.frame(
  "Characteristic" = c("Distant", "Regional"),
  "Hazard ratio" = hr[, 1],
  "95% CI (lower)" = hr[, 3],
  "95% CI (upper)" = hr[, 4]
  )

# Format numerical values to two decimal places
numeric_cols <- sapply(simple_model_stage_table_hr, is.numeric)

simple_model_stage_table_hr[, numeric_cols] <- round(simple_model_stage_table_hr[, numeric_cols], digits = 2)

# Set flextable background to white
set_flextable_defaults(background.color = "white")

# Create a flextable object
simple_model_stage_table_hr <- flextable(simple_model_stage_table_hr)

# Set column headers
simple_model_stage_table_hr <- set_header_labels(x = simple_model_stage_table_hr, values = c("Characteristic", "Hazard Ratio", "Lower 95% CI", "Upper 95% CI"))

# Add a title
simple_model_stage_table_hr <- set_caption(simple_model_stage_table_hr, "Table 3. Unadjusted hazard ratios and 95% confidence intervals for the effect of cancer stage on time to all-cause mortality among males in the U.S. with prostate cancer (SEER database).")

# Autofit the table
simple_model_stage_table_hr <- autofit(simple_model_stage_table_hr)

# Look at the table with hazard ratios and confidence intervals
print(simple_model_stage_table_hr)

# Save the table with hazard ratios and confidence intervals
save_as_image(simple_model_stage_table_hr, here("results/tables/simple_model_stage_table_hr.png"), expand = 10)
```


The results from the model fitting using only "stage" as the predictor ("simple_model_stage_table.rds" and "simple_model_stage_table_hr.png") can be found in the "tables" folder.


# Adjusted Analysis


Finally, let's perform adjusted analysis of the full Cox proportional hazards model using  ethnicity, age group, and cancer stage as the predictors.


```{r}
# Fit the Cox proportional hazards model using "ethnicity", "agegroup", and "stage" as the predictors
full_model <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(ethnicity), ref = "White") + relevel(factor(agegroup), ref = "0-49 years") + relevel(factor(stage), ref = "Localized"), data = seer, method = "breslow")
summary(full_model)

# Compute and print the C-index
predicted <- predict(full_model, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = seer)
print(c_index[[1]])

# Place the results from the model fitting into a data frame with the tidy function
full_model_table <- tidy(full_model)

# Look at the table with the results from the model fitting
print(full_model_table)

# Save the table with the results from the model fitting 
saveRDS(full_model_table, file = here("results/tables/full_model_table.rds"))

# Place the exponentiated coefficients (hazard ratios) and confidence intervals from the model fitting into a data frame 
coxsummary <- summary(full_model)
hr <- coxsummary$conf.int

full_model_hr <- data.frame(
  "Characteristic" = c("Asian", "Black", "Hispanic", "Other", "50-59 years", "60-69 years", "70-79 year", "80+ years", "Distant", "Regional"),
  "Adjusted hazard ratio" = hr[, 1],
  "95% CI (lower)" = hr[, 3],
  "95% CI (upper)" = hr[, 4]
  )

# Format numerical values to two decimal places
numeric_cols <- sapply(full_model_hr, is.numeric)

full_model_hr[, numeric_cols] <- round(full_model_hr[, numeric_cols], digits = 2)

# Set flextable background to white
set_flextable_defaults(background.color = "white")

# Create a flextable object
full_model_table_hr <- flextable(full_model_hr)

# Set column headers
full_model_table_hr <- set_header_labels(x = full_model_table_hr, values = c("Characteristic", "Adjusted Hazard Ratio", "Lower 95% CI", "Upper 95% CI"))

# Add a title
full_model_table_hr <- set_caption(full_model_table_hr, "Table 2. Adjusted hazard ratios and 95% confidence intervals for time to all-cause mortality among males with prostate cancer.")

# Autofit the table
full_model_table_hr <- autofit(full_model_table_hr)

# Look at the table with hazard ratios and confidence intervals
print(full_model_table_hr)

# Save the table with hazard ratios and confidence intervals
save_as_image(full_model_table_hr, here("results/tables/full_model_table_hr.png"), expand = 10)
```


The results from the model fitting using "ethnicity", "agegroup", and "stage" as the predictors ("full_model_table.rds" and "full_model_table_hr.png") can be found in the "tables" folder.


The Concordance Index (C-index) is a measure of predictive accuracy or discrimination in survival analysis models, where a higher value indicates better discrimination. Comparing the models with only "ethnicity" (C-index = 0.52), only "agegroup" (C-index = 0.70), and only "stage" (C-index = 0.61), the model with all variables has the best predictive discrimination and model performance (C-index = 0.76).


# Train/Test Split

The survival analysis conducted up to this point was an etiologic/causal approach to the research question and data. As part of secondary analyses, we will also consider a predictive approach. First, we need to create training and testing datasets from the full dataset. We'll use the training data to fit the four Cox proportional hazards models again and compare C-index values.


```{r}
# Set a seed
rngseed = 1234
set.seed(rngseed)

# Split the data randomly into 75% train and 25% test set
data_split <- initial_split(seer, prop = 3/4)
train_data <- training(data_split)
test_data <- testing(data_split)

# Fit the Cox proportional hazards model with only "ethnicity" using the training data
simple_model_ethnicity_train <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(ethnicity), ref = "White"), data = train_data, method = "breslow")
summary(simple_model_ethnicity_train)

# Compute and print the C-index
predicted <- predict(simple_model_ethnicity_train, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = train_data)
print(c_index[[1]])

# Fit the Cox proportional hazards model with only "agegroup" using the training data
simple_model_agegroup_train <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(agegroup), ref = "0-49 years"), data = train_data, method = "breslow")
summary(simple_model_agegroup_train)

# Compute and print the C-index
predicted <- predict(simple_model_agegroup_train, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = train_data)
print(c_index[[1]])

# Fit the Cox proportional hazards model with only "stage" using the training data
simple_model_stage_train <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(stage), ref = "Localized"), data = train_data, method = "breslow")
summary(simple_model_stage_train)

# Compute and print the C-index
predicted <- predict(simple_model_stage_train, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = train_data)
print(c_index[[1]])

# Fit the full Cox proportional hazards model using the training data
full_model_train <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(ethnicity), ref = "White") + relevel(factor(agegroup), ref = "0-49 years") + relevel(factor(stage), ref = "Localized"), data = train_data, method = "breslow")
summary(full_model_train)

# Compute and print the C-index
predicted <- predict(full_model_train, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = train_data)
print(c_index[[1]])
```


Using the training data and comparing the C-index values for the four models, the best-performing model is the full model (C-index = 0.76), and the worst-performing model is the model with only "ethnicity" (C-index = 0.52).


# More Model Fitting


Although the research question of this project is causal rather than predictive, let's compare the full Cox proportional hazards model with other types of models. First, let's use the training data to fit a logistic regression model with "death" as the outcome and all variables as predictors.


```{r}
# Fit a logistic regression model to the outcome "death" using the other variables as the predictors
train_data$death <- as.factor(train_data$death)

logistic_model <- logistic_reg() %>% set_engine("glm")

logistic_fit <- logistic_model %>% fit(death ~ relevel(factor(ethnicity), ref = "White") + relevel(factor(agegroup), ref = "0-49 years") + relevel(factor(stage), ref = "Localized"), data = train_data)

tidy(logistic_fit)

# Compute accuracy
accuracy <- logistic_fit %>% 
  predict(train_data) %>% 
  bind_cols(train_data) %>% 
  metrics(truth = death, estimate = .pred_class) %>% 
  filter(.metric == "accuracy") 

# Compute ROC-AUC
auc <-  logistic_fit %>%
  predict(train_data, type = "prob") %>%
  bind_cols(train_data) %>%
  roc_auc(truth = death, .pred_1)

# Print accuracy and ROC-AUC
print(accuracy)
print(auc)
```


In the logistic regression model, all variables are significantly associated with the outcome "death" (p-values < 0.001). The accuracy of the model is 0.80, and the ROC-AUC is 0.76.


Next let's look at a LASSO regression model.


```{r}
# Fit a LASSO regression model to the outcome "death" using the other variables as the predictors
lasso_model <- logistic_reg(penalty = 0.1, mixture = 1) %>% set_engine("glmnet")

lasso_wflow <- workflow() %>% 
  add_model(lasso_model) %>% 
  add_formula(death ~ relevel(factor(ethnicity), ref = "White") + 
                 relevel(factor(agegroup), ref = "0-49 years") + 
                 relevel(factor(stage), ref = "Localized"))

lasso_fit <- lasso_wflow %>% fit(data = train_data)

# Compute accuracy
accuracy <- lasso_fit %>% 
  predict(train_data) %>% 
  bind_cols(train_data) %>% 
  metrics(truth = death, estimate = .pred_class) %>% 
  filter(.metric == "accuracy") 

# Compute ROC-AUC
auc <-  lasso_fit %>%
  predict(train_data, type = "prob") %>%
  bind_cols(train_data) %>%
  roc_auc(truth = death, .pred_1)

# Print accuracy and ROC-AUC
print(accuracy)
print(auc)
```


In the LASSO regression model, the accuracy is 0.76, and the ROC-AUC is 0.65.


Now let's tune the LASSO regression model using 5-fold cross-validation repeated 5 times to evaluate model performance during the tuning process.


```{r}
# Set a seed
rngseed = 1234
set.seed(rngseed)

# Define the workflow
lasso_model_tune <- logistic_reg(penalty = tune(), mixture = 1) %>% set_engine("glmnet")

lasso_wflow_tune <- workflow() %>% 
  add_model(lasso_model_tune) %>% 
  add_formula(death ~ relevel(factor(ethnicity), ref = "White") + 
                 relevel(factor(agegroup), ref = "0-49 years") + 
                 relevel(factor(stage), ref = "Localized"))

lasso_fit_tune <- lasso_wflow_tune %>% fit(data = train_data)

# Define the penalty grid
penalty_grid <- tibble(penalty = 10^seq(-5, 2, length.out = 50))

# Tune the model with cross-validation
lasso_cv_tune <- tune_grid(lasso_wflow_tune,
  resamples = vfold_cv(train_data, v = 5, repeats = 5),
  grid = penalty_grid)

# Look at tuning diagnostics
autoplot(lasso_cv_tune)
```


The plot for the LASSO model tuned with cross-validation shows that the LASSO model performs best (highest accuracy and ROC-AUC values) for low penalty values, and the accuracy and ROC-AUC values decrease as the amount of regularization (penalty parameter) increases.


Finally, let's look at a linear discriminant analysis (DA) model.


```{r}
# Fit a linear discriminant analysis model to the outcome "death" using the other variables as the predictors
da_model <- discrim_linear()

da_wflow <- workflow() %>%
  add_model(da_model) %>% 
  add_formula(death ~ relevel(factor(ethnicity), ref = "White") + 
                 relevel(factor(agegroup), ref = "0-49 years") + 
                 relevel(factor(stage), ref = "Localized"))

da_fit <- da_wflow %>% fit(data = train_data)

# Compute accuracy
accuracy <- da_fit %>% 
  predict(train_data) %>% 
  bind_cols(train_data) %>% 
  metrics(truth = death, estimate = .pred_class) %>% 
  filter(.metric == "accuracy") 

# Compute ROC-AUC
auc <-  da_fit %>%
  predict(train_data, type = "prob") %>%
  bind_cols(train_data) %>%
  roc_auc(truth = death, .pred_1)

# Print accuracy and ROC-AUC
print(accuracy)
print(auc)
```


In the linear discriminant analysis model, the accuracy is 0.80, and the ROC-AUC is 0.76.


Comparing the logistic, LASSO, and DA models, the accuracy and ROC-AUC values are highest for the logistic and DA models. We conclude that these models perform better than the LASSO model. Because the accuracy and ROC-AUC values for the logistic and DA models are the same, let's pick the logistic regression model as the overall best of these predictive models since it's simpler and easier to interpret.


Let's do a final model evaluation on the logistic regression model using the test data.


```{r}
# Fit a logistic regression model to the outcome "death" using the other variables as the predictors
test_data$death <- as.factor(test_data$death)

logistic_model <- logistic_reg() %>% set_engine("glm")

logistic_fit <- logistic_model %>% fit(death ~ relevel(factor(ethnicity), ref = "White") + relevel(factor(agegroup), ref = "0-49 years") + relevel(factor(stage), ref = "Localized"), data = test_data)

tidy(logistic_fit)

# Compute accuracy
accuracy <- logistic_fit %>% 
  predict(test_data) %>% 
  bind_cols(test_data) %>% 
  metrics(truth = death, estimate = .pred_class) %>% 
  filter(.metric == "accuracy") 

# Compute ROC-AUC
auc <-  logistic_fit %>%
  predict(test_data, type = "prob") %>%
  bind_cols(test_data) %>%
  roc_auc(truth = death, .pred_1)

# Print accuracy and ROC-AUC
print(accuracy)
print(auc)
```


Using the test data with the logistic regression model, all variables are significantly associated with the outcome "death" (p-values < 0.001). The accuracy of the model is 0.80, and the ROC-AUC is 0.76.


# Summary of Statistical Analyses


We used data on prostate cancer survival among male patients in the U.S. to investigate whether race and ethnicity are associated with time to all-cause mortality. The other variables were age group and cancer stage. For the survival analysis approach, we looked at four Cox proportional hazards models: three univariable models and the full model with all covariates. Comparing the models with only "ethnicity" (C-index = 0.52), only "agegroup" (C-index = 0.70), and only "stage" (C-index = 0.61), the model with all variables has the best predictive discrimination and model performance (C-index = 0.76). For the non-survival analysis approach, we looked at three other full models: logistic regression, LASSO regression, and discriminant analysis. The logistic regression model and the discriminant analysis model performed equally better than the LASSO regression model based on the accuracy (0.80) and ROC-AUC (0.76) values. We chose the logistic regression model for simplicity of interpretation. Because the research question for this project is etiologic rather than predictive, the results of the survival analysis approach using the Cox proportional hazards models will be discussed in the manuscript.


The figures and tables saved in this statistical analysis script are further discussed in the "Supplementary Material" document. 

